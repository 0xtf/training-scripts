#!/bin/bash

# Bling bling
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# I don't trust myself to only run this on Ubuntu or Debian
if [ "$(grep -Ei 'debian|buntu' /etc/*release)" ]; then
  echo "Seems like we are good!"
  clear
else
  echo "Not Ubuntu or Debian!"
  exit 1
fi

# Script needs to run as root
if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit 1
fi

# Internet 1 2?
wget -q --spider http://google.com
if [ $? -eq 0 ]; then
  echo "Yeah, we good"
  clear
else
  echo "Houston, we have a problem! No Internet!"
  exit 1
fi

# Explain what will happen
echo -e "\nBefore running this script, make sure you know what will happen. This script will:\n\n \
- Upgrade your base OS\n \
- Change the hostname of the server to suricata\n \
- Add the OISF PPA repository\n \
- Install Suricata\n \
- Download Suricata configuration files from Github\n \
- Ask you about your HOME CIDR to adjust the Suricata configuration file\n \
- Ask you about which interface you'd like to use with Suricata\n \
- Make sure the interface is in PROMISC mode and add an entry to /etc/rc.local to make sure it stays that way\n \
- Create a separate netplan configuration for the capture device to mark it as optional so it doesn't hang on reboots\n \
- Create Suricata rules files with suricata-update\n \
- Stop/Start Suricata\n"

read -p "Press enter to continue ..."

# Ask for confirmation before running
read -r -p "Are you sure you want to continue? [y/N] " response
case "$response" in
    [yY][eE][sS]|[yY])
        echo ""
        echo -e "${GREEN}► Updating OS ...${NC}\n"
        apt -qq update > /dev/null 2>&1
        # Prevent dialog of dpkg for config overwrite
        DEBIAN_FRONTEND=noninteractive apt -yq upgrade > /dev/null 2>&1
        ## Clean up
        apt -y autoremove > /dev/null 2>&1
        # Change hostname
        echo -e "${GREEN}► Branding ... Changing hostname ...${NC}\n"
        hostnamectl set-hostname suricata
        ## Making sure those changes stick after reboot; OK if it fails
        sed -i "s/preserve_hostname: false/preserve_hostname: true/" /etc/cloud/cloud.cfg > /dev/null 2>&1
        # Add the Suricata PPA
        echo -e "${GREEN}► Installing OISF Suricata PPA ...${NC}\n"
        add-apt-repository ppa:oisf/suricata-stable -y > /dev/null 2>&1
        # Install Suricata
        echo -e "${GREEN}► Installing suricata via apt ...${NC}\n"
        apt install suricata -y > /dev/null 2>&1
        # Download configuration files for Suricata
        echo -e "${GREEN}► Downloading Suricata configuration files ...${NC}\n"
        ## Disable rules
        curl -sSL https://raw.githubusercontent.com/0xtf/training-scripts/master/suricata/configs/disable.conf -o /etc/suricata/disable.conf
        ## suricata-update config
        curl -sSL https://raw.githubusercontent.com/0xtf/training-scripts/master/suricata/configs/update.yaml -o /etc/suricata/update.yaml
        ## suricata config
        curl -sSL https://raw.githubusercontent.com/0xtf/training-scripts/master/suricata/configs/suricata.yaml -o /etc/suricata/suricata.yaml
        # User input for deployment specific configurations
        echo -e "${GREEN}► Wake up! You have work to do. A few questions about the deployment ...${NC}\n"
        # Ask about network
        read -r -p "What's your HOME network CIDR (i.e 10.0.0.0/24)? " homecidr
        # Ask about network interface
        read -r -p "What's the capture device to use with Suricata (i.e ens160)? " capdevice
        # Use the input from above to replace the placeholder REPLACE_NET and REPLACE_CAP in the Suricata configuration file
        echo ""
        echo -e "${GREEN}► Adjusting Suricata configuration file based on your input ...${NC}\n"
        sed -i "s!REPLACE_NET!${homecidr}!g" /etc/suricata/suricata.yaml
        sed -i "s/REPLACE_CAP/${capdevice}/g" /etc/suricata/suricata.yaml
        # Making sure device is up
        ip link set $capdevice up
        ip link set $capdevice promisc on
        # Thank you netplan! Creating a config in rc.local to enable PROMISC on capture device
        echo -e "#!/bin/sh\nset -e\nip link set $capdevice up\nip link set $capdevice promisc on" >> /etc/rc.local
        chmod +x /etc/rc.local
        # Adjusting netplan so it doesn't hang for unconfigured devices; making CAPDEVICE optional
        ## I know. This hurts me more than it hurts you
        echo -e "network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    $capdevice:\n      optional: true" > /etc/netplan/60-suricata.yaml
        netplan apply
        # Generate rules file
        echo -e "${GREEN}► Time to retrieve some rulesets and create rules file ...${NC}\n"
        sleep 3
        suricata-update
        # Restart Suricata
        echo ""
        echo -e "${GREEN}► We should be good to go. Restarting Suricata ... Suricata state:${NC}\n"
        systemctl restart suricata.service
        systemctl is-active suricata.service
        echo ""
        exit 0
        ;;
    *)
        exit 1
        ;;
esac
